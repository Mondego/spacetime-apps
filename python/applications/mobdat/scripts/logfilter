#!/usr/bin/python
"""
Copyright (c) 2014, Intel Corporation

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* Neither the name of Intel Corporation nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

@file    logfilter
@author  Mic Bowman
@date    2014-07-23

A script for reading logs and performing calculations on the
data contained within them.

"""

import sys, os, time
import logging, logging.handlers, warnings

sys.path.append(os.path.join(os.environ.get("OPENSIM","/share/opensim"),"lib","python"))
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), "..")))
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), "..", "lib")))

import argparse, json, re
import string, csv

logger = logging.getLogger()

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def ParseCommandLine() :
    parser = argparse.ArgumentParser()

    parser.add_argument('--verbose', help='Display process information', action='store_true')
    parser.add_argument('--ifile', help='List of input file names', nargs="+")
    parser.add_argument('command', help='Command information', nargs="*")

    options = parser.parse_args()
    return options

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def SetupLoggers(options) :
    global logger
    logger.setLevel(logging.DEBUG if options.verbose else logging.WARN)

    clog = logging.StreamHandler()
    clog.setFormatter(logging.Formatter('[%(name)s] %(message)s'))
    clog.setLevel(logging.INFO)
    logger.addHandler(clog)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def ReadDataFile(handle) :
    data = []

    reader = csv.reader(handle)
    for row in reader :
        if len(row) < 3 :
            logger.warn('invalid row: %s', string.join(row))
            continue

        data.append(row)

    return data

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def ReadDataFiles(options) :
    data = []

    if options.ifile :
        for fname in options.ifile :
            logger.info('read file %s', fname)
            with open(fname, 'rb') as handle :
                data.extend(ReadDataFile(handle))
    else :
        data.extend(ReadDataFile(sys.stdin))

    logger.info('sorting the data')
    data.sort(key=lambda r : int(r[1]))

    return data

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def _WriteDataFile(handle, data) :
    writer = csv.writer(handle)
    for row in data :
        writer.writerow(row)

def WriteDataFile(options, data) :
    if options.ofile :
        logger.info('save data to file %s', options.ofile)
        with open(options.ofile, "wb") as handle :
            _WriteDataFile(handle, data)
    else :
        _WriteDataFile(sys.stdout, data)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def CMD_SaveDataFile(options, command, data) :
    parser = argparse.ArgumentParser()
    parser.add_argument('--ofile', help='Output file name')
    options = parser.parse_args(command)

    WriteDataFile(options, data)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def CMD_SelectByKey(options, command, data) :
    parser = argparse.ArgumentParser()
    parser.add_argument('--ofile', help='Output file name')
    parser.add_argument('--key', help='Stats keys to select', nargs="+")
    options = parser.parse_args(command)

    keys = options.key or []

    fdata = []
    for row in data :
        if row[0] in keys : fdata.append(row)

    WriteDataFile(options, fdata)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def CMD_SelectByField(options, command, data) :
    import re

    parser = argparse.ArgumentParser()
    parser.add_argument('--ofile', help='Output file name')
    parser.add_argument('--field', help='Field to use for selection', type=int, default = 0)
    parser.add_argument('--pattern', help='String pattern to select', nargs="+", default = [".*"])
    options = parser.parse_args(command)

    patterns = map(lambda p : re.compile(p + "$", re.IGNORECASE), options.pattern)

    fdata = []
    for row in data :
        if len(row) > options.field :
            for p in patterns :
                if p.match(row[options.field]) : fdata.append(row)

    WriteDataFile(options, fdata)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def CMD_DestinationMap(options, command, data) :
    parser = argparse.ArgumentParser()
    parser.add_argument('--ofile', help='Output file name')
    options = parser.parse_args(command)


    destinations = {}
    dmap = {}

    for row in data :
        if row[0] == 'tripbeg' :
            person = row[2]
            destination = row[5]

            if destination not in destinations : destinations[destination] = 0
            destinations[destination] += 1

            if person not in dmap : dmap[person] = {}
            if destination not in dmap[person] : dmap[person][destination] = 0
            dmap[person][destination] += 1

    if options.ofile :
        with open(options.ofile, "w") as handle :
            for (person, destinations) in dmap.iteritems() :
                handle.write("{0} --> {1}\n".format(person, str(destinations)))
    else :
        for (person, destinations) in dmap.iteritems() :
            print "{0} --> {1}".format(person, str(destinations))

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def CMD_TimeSeries(options, command, data) :
    def CreateMetric(count) : return count

    parser = argparse.ArgumentParser()
    parser.add_argument('--ofile', help='Output file name')
    parser.add_argument('--pattern', help='String pattern to select', nargs="+", default = [".*"])
    options = parser.parse_args(command)

    timebase = int(time.time())
    timespread = 4

    destinations = {}
    dmap = {}

    print options.pattern

    patterns = map(lambda p : re.compile(p + '_trip.*$', re.IGNORECASE), options.pattern)
    carcount = 0

    fdata = []
    for row in data :
        if row[0] == 'sumoconnector' :
            carcount = row[3]
        elif row[0] == 'dynamics' :
            for p in patterns :
                person = row[2].strip()
                if p.match(person) :
                    metric = CreateMetric(carcount)
                    tstamp = timebase + timespread * int(row[1].strip())
                    xpos = 1.5 * float(row[3].strip()) + 45.0
                    ypos = 1.5 * float(row[4].strip()) - 123.0

                    (identity, trip) = person.split('_')
                    fdata.append([identity, trip, tstamp, xpos, ypos, metric])
                    continue

    WriteDataFile(options, fdata)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def Main() :
    options = ParseCommandLine()
    SetupLoggers(options)

    data = ReadDataFiles(options)

    command = options.command.pop(0) if options.command else 'save'
    if command == 'save' :
        CMD_SaveDataFile(options, options.command, data)
    elif command == 'bykey' :
        CMD_SelectByKey(options, options.command, data)
    elif command == 'byfield' :
        CMD_SelectByField(options, options.command, data)
    elif command == 'dmap' :
        CMD_DestinationMap(options, options.command, data)
    elif command == 'series' :
        CMD_TimeSeries(options, options.command, data)
    else :
        logger.warn('unknown command: %s', command)

# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# -----------------------------------------------------------------
# -----------------------------------------------------------------
if __name__ == '__main__':
    Main()
