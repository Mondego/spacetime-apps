#!/usr/bin/python
"""
Copyright (c) 2014, Intel Corporation

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.

* Neither the name of Intel Corporation nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

@file    mobdat
@author  Mic Bowman
@date    2013-12-03

This is the main script for running the mobdat mobile data simulator.

"""

import sys, os
import logging, warnings

sys.path.append(os.path.join(os.environ.get("OPENSIM","/share/opensim"),"lib","python"))
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), "..")))
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), "..", "lib")))

import pygraphviz as pgv
import re, json, argparse

from mobdat.common.graph import Graph, Decoration
from mobdat.builder import WorldBuilder

DataBindings = None
AppSettings = None

logger = logging.getLogger(__name__)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def ParseConfigurationFile(cfile) :
    try :
        global AppSettings
        AppSettings = json.load(open(cfile))
    except IOError as detail :
        warnings.warn("Error parsing configuration file %s; IO error %s" % (cfile, str(detail)))
        sys.exit(-1)
    except ValueError as detail :
        warnings.warn("Error parsing configuration file %s; value error %s" % (cfile, str(detail)))
        sys.exit(-1)
    except NameError as detail :
        warnings.warn("Error parsing configuration file %s; name error %s" % (cfile, str(detail)))
        sys.exit(-1)
    except :
        warnings.warn('Error parsing configuration file %s; %s' % (cfile, sys.exc_info()[0]))
        sys.exit(-1)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def ParseCommandLine(args) :
    parser = argparse.ArgumentParser()

    parser.add_argument('--load', help='data file to load on startup')
    parser.add_argument('--data', help='name of the file to write graph data')
    parser.add_argument('--image', help='name of the file to write graph image')
    parser.add_argument('--depth', help='number of hops to expand from the starting set', default=2)
    parser.add_argument('nodelist', help='nodes from which to start the expansion', nargs="*")

    options = parser.parse_args(args)

    global AppSettings

    if options.load :
        AppSettings["General"]["WorldInfoFile"] = options.load

    if options.data :
        AppSettings["General"]["GraphDataFile"] = options.data

    if options.image :
        AppSettings["General"]["GraphImageFile"] = options.image

    if options.depth :
        AppSettings["General"]["Depth"] = options.depth

    AppSettings["General"]["NodeList"] = options.nodelist

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def SetupLoggers() :
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    logfile = filename=os.path.join(os.path.dirname(__file__), "../logs/mobdat.log")
    flog = logging.FileHandler(logfile, mode='w')
    flog.setFormatter(logging.Formatter('%(levelname)s [%(name)s] %(message)s'))
    logger.addHandler(flog)

    clog = logging.StreamHandler()
    #clog.addFilter(logging.Filter(name='mobdat'))
    clog.setFormatter(logging.Formatter('[%(name)s] %(message)s'))
    clog.setLevel(logging.WARN)
    logger.addHandler(clog)

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def InitializeDataBindings() :
    global AppSettings

    cf = AppSettings["General"].get("WorldInfoFile","world.js")
    world = WorldBuilder.WorldBuilder.LoadFromFile(cf)

    global DataBindings
    DataBindings = {"world" : world}

# -----------------------------------------------------------------
# -----------------------------------------------------------------
cpattern = re.compile('coffee')

def RequireNode(graph, person) :
    if graph.has_node(person.Name) :
        return

    graph.add_node(person.Name)
    node = graph.get_node(person.Name)
    for pref, weight in person.Preference.PreferenceMap.iteritems() :
        if cpattern.match(pref) : node.attr[pref] = weight

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def WriteGraphData(graph) :
    global AppSettings

    logger.info('generating graph data file')
    graph.write(AppSettings["General"].get("GraphDataFile","test.dot"))

    if "GraphImageFile" in AppSettings["General"] :
        logger.info('generating graph image file')
        graph.draw(AppSettings["General"]["GraphImageFile"], prog='neato')

# -----------------------------------------------------------------
# -----------------------------------------------------------------
def BuildGraph() :
    """
    BuildGraph -- dump an undirected graph of nodes within maxdepth of a starting
    set of nodes
    """

    global AppSettings
    maxdepth = int(AppSettings["General"].get("Depth", 2))
    nodelist = AppSettings["General"].get("NodeList", [])

    global DataBindings

    nodes = set()
    graph = pgv.AGraph(directed=False)

    logger.info('adding nodes')

    # add the initial set of nodes
    nextpass = set()
    for nname in nodelist :
        if nname in DataBindings['world'].Nodes :
            nextpass.add(DataBindings['world'].Nodes[nname])
        else :
            logger.warn('unknown node %s', nname)

    expanded = set()
    depth = 0

    while depth < maxdepth :
        logger.info('processing depth %d', depth)

        depth += 1
        thispass = nextpass
        nextpass = set()
        for person in thispass :
            expanded.add(person)
            RequireNode(graph, person)

            for edge in person.IterOutputEdges(edgetype = 'ConnectedTo') :
                if edge.EndNode not in expanded and edge.EndNode not in thispass :
                    RequireNode(graph, edge.EndNode)
                    graph.add_edge(edge.StartNode.Name, edge.EndNode.Name, weight=edge.Weight.Weight)
                    nextpass.add(edge.EndNode)

    WriteGraphData(graph)


# -----------------------------------------------------------------
# -----------------------------------------------------------------
def Main() :
    SetupLoggers()

    # parse out the configuration file first
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', help='configuration file for simulation settings', default='settings.js')
    (options, remainder) = parser.parse_known_args()

    ParseConfigurationFile(options.config)
    ParseCommandLine(remainder)

    InitializeDataBindings()
    BuildGraph()

# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
if __name__ == '__main__':
    Main()
